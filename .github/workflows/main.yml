name: Check & test
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  check:
    name: Quality & security checks
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Check out code
        uses: actions/checkout@v2

      - name: Lint Go Code
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin # temporary fix. See https://github.com/actions/setup-go/issues/14
          make check

  test:
    name: Test & coverage
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3308:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=5s --health-retries=3

      rabbitmq:
        image: rabbitmq:management
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_USER: rabbitmq_user
          RABBITMQ_DEFAULT_PASS: rabbitmq_password
          RABBITMQ_DEFAULT_VHOST: test
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Check out code
        uses: actions/checkout@v2

      - name: Create database
        run: |
          sudo apt-get install -y mysql-client
          mysql -uroot -h127.0.0.1 --port=3308 -proot -e 'CREATE DATABASE IF NOT EXISTS test;'
          mysql -uroot -h127.0.0.1 --port=3308 -proot -e 'CREATE DATABASE IF NOT EXISTS test_schema;'
          mysql -uroot -h127.0.0.1 --port=3308 -proot -e 'CREATE DATABASE IF NOT EXISTS test_log;'
          mysql -uroot -h127.0.0.1 --port=3308 -proot -e 'set global max_connections = 300;'

      - name: Run unit tests with coverage.
        run: |
          export GOPATH=$(go env GOPATH)
          make cover

      - name: Upload Coverage report to CodeCov
        uses: codecov/codecov-action@v1.0.0
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./resources/cover/cover.out